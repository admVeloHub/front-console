// VERSION: v1.2.2 | DATE: 2024-12-19 | AUTHOR: VeloHub Development Team
import { usersAPI } from './api';

// Cache local para melhor performance
let usersCache = null;
let cacheTimestamp = null;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutos

// Fun√ß√£o para verificar se o cache √© v√°lido
const isCacheValid = () => {
  return usersCache && cacheTimestamp && (Date.now() - cacheTimestamp) < CACHE_DURATION;
};

// Fun√ß√£o para limpar o cache
const clearCache = () => {
  usersCache = null;
  cacheTimestamp = null;
};

// Fun√ß√£o para verificar se um email est√° autorizado
export const isUserAuthorized = async (email) => {
  try {
    console.log('Verificando autoriza√ß√£o para email:', email);
    
    // BYPASS TEMPOR√ÅRIO: Permitir login do Lucas Gravina
    if (email === 'lucas.gravina@velotax.com.br') {
      console.log('üö® BYPASS ATIVADO: Permitindo login do Lucas Gravina');
      return true;
    }
    
    const response = await usersAPI.isAuthorized(email);
    console.log('Resposta da verifica√ß√£o:', response);
    
    // O campo 'authorized' est√° no n√≠vel raiz da resposta
    const isAuthorized = response.authorized;
    console.log('Usu√°rio autorizado?', isAuthorized);
    
    return isAuthorized;
  } catch (error) {
    console.error('Erro ao verificar autoriza√ß√£o do usu√°rio:', error);
    
    // BYPASS TEMPOR√ÅRIO: Em caso de erro, permitir login do Lucas Gravina
    if (email === 'lucas.gravina@velotax.com.br') {
      console.log('üö® BYPASS ATIVADO (erro): Permitindo login do Lucas Gravina');
      return true;
    }
    
    return false;
  }
};

// Fun√ß√£o para obter dados do usu√°rio autorizado
export const getAuthorizedUser = async (email) => {
  try {
    // BYPASS TEMPOR√ÅRIO: Retornar dados do Lucas Gravina
    if (email === 'lucas.gravina@velotax.com.br') {
      console.log('üö® BYPASS ATIVADO: Retornando dados do Lucas Gravina');
      return {
        _userMail: 'lucas.gravina@velotax.com.br',
        _userId: 'Lucas Gravina',
        _userRole: 'Administrador',
        _userClearance: {
          artigos: true,
          velonews: true,
          botPerguntas: true,
          chamadosInternos: true,
          igp: true,
          botAnalises: true,  // ‚úÖ ADICIONADO: Bot An√°lises
          qualidade: true,
          capacity: true,
          config: true,
          servicos: true,
          funcionarios: true
        },
        _userTickets: {
          artigos: true,
          processos: true,
          roteiros: true,
          treinamentos: true,
          funcionalidades: true,
          recursos: true,
          gestao: true,
          rhFin: true,
          facilities: true
        },
        _funcoesAdministrativas: {
          avaliador: true,
          auditor: true,
          relatoriosGestao: true
        }
      };
    }
    
    const response = await usersAPI.getByEmail(email);
    // Extrair dados do usu√°rio da resposta
    const mongoUser = response.data || response;
    return mongoUser; // Retorna dados diretamente do MongoDB
  } catch (error) {
    console.error('Erro ao obter dados do usu√°rio:', error);
    
    // BYPASS TEMPOR√ÅRIO: Em caso de erro, retornar dados do Lucas Gravina
    if (email === 'lucas.gravina@velotax.com.br') {
      console.log('üö® BYPASS ATIVADO (erro): Retornando dados do Lucas Gravina');
      return {
        _userMail: 'lucas.gravina@velotax.com.br',
        _userId: 'Lucas Gravina',
        _userRole: 'Administrador',
        _userClearance: {
          artigos: true,
          velonews: true,
          botPerguntas: true,
          chamadosInternos: true,
          igp: true,
          botAnalises: true,  // ‚úÖ ADICIONADO: Bot An√°lises
          qualidade: true,
          capacity: true,
          config: true,
          servicos: true,
          funcionarios: true
        },
        _userTickets: {
          artigos: true,
          processos: true,
          roteiros: true,
          treinamentos: true,
          funcionalidades: true,
          recursos: true,
          gestao: true,
          rhFin: true,
          facilities: true
        },
        _funcoesAdministrativas: {
          avaliador: true,
          auditor: true,
          relatoriosGestao: true
        }
      };
    }
    
    return null;
  }
};

// Fun√ß√£o para mapear dados do frontend para o schema do MongoDB
const mapToMongoSchema = (userData) => {
  return {
    _userMail: userData.email,
    _userId: userData.nome, // Nome do usu√°rio no cadastro
    _userRole: userData.funcao || 'Usu√°rio',
    _userClearance: {
      ...userData.permissoes,
      servicos: userData.permissoes?.servicos || false
    },
    _userTickets: userData.tiposTickets || {},
    _funcoesAdministrativas: {
      avaliador: userData.funcoesAdministrativas?.avaliador || false,
      auditoria: userData.funcoesAdministrativas?.auditoria || false,
      relatoriosGestao: userData.funcoesAdministrativas?.relatoriosGestao || false
    }
  };
};

// Fun√ß√£o para adicionar novo usu√°rio autorizado
export const addAuthorizedUser = async (userData) => {
  try {
    const mongoData = mapToMongoSchema(userData);
    const newUser = await usersAPI.create(mongoData);
    clearCache(); // Limpar cache ap√≥s adicionar usu√°rio
    return newUser; // Retorna dados diretamente do MongoDB
  } catch (error) {
    console.error('Erro ao adicionar usu√°rio:', error);
    throw error;
  }
};

// Fun√ß√£o para atualizar usu√°rio autorizado
export const updateAuthorizedUser = async (email, updatedData) => {
  try {
    // Se os dados j√° est√£o no formato MongoDB (v√™m do modal de permiss√µes), usar diretamente
    // Se n√£o, mapear do formato frontend para MongoDB
    let mongoData;
    
    if (updatedData._userClearance || updatedData._userTickets || updatedData._funcoesAdministrativas) {
      // J√° est√° no formato MongoDB - usar diretamente
      mongoData = updatedData;
    } else if (updatedData.permissoes || updatedData.tiposTickets) {
      // Est√° no formato frontend - mapear para MongoDB
      mongoData = mapToMongoSchema(updatedData);
    } else {
      // Dados b√°sicos - manter estrutura MongoDB existente
      mongoData = updatedData;
    }
    
    console.log('Dados para atualiza√ß√£o:', mongoData);
    console.log('Email do usu√°rio:', email);
    
    const updatedMongoUser = await usersAPI.update(email, mongoData);
    clearCache(); // Limpar cache ap√≥s atualizar usu√°rio
    return updatedMongoUser; // Retorna dados diretamente do MongoDB
  } catch (error) {
    console.error('Erro ao atualizar usu√°rio:', error);
    throw error;
  }
};

// Fun√ß√£o para obter todos os usu√°rios autorizados
export const getAllAuthorizedUsers = async () => {
  try {
    // Verificar cache primeiro
    if (isCacheValid()) {
      console.log('Retornando usu√°rios do cache:', usersCache);
      return usersCache;
    }

    console.log('Buscando usu√°rios do backend...');
    // Buscar do backend
    const response = await usersAPI.getAll();
    console.log('Resposta do backend:', response);
    
    // Extrair o array de usu√°rios da resposta
    const mongoUsers = response.data || response;
    console.log('Usu√°rios extra√≠dos:', mongoUsers);
    
    // Atualizar cache
    usersCache = mongoUsers;
    cacheTimestamp = Date.now();
    
    return mongoUsers; // Retorna dados diretamente do MongoDB
  } catch (error) {
    console.error('Erro ao obter usu√°rios:', error);
    
    // Em caso de erro, tentar usar cache mesmo que expirado
    if (usersCache) {
      console.warn('Usando cache expirado devido a erro na API');
      return usersCache;
    }
    
    throw error;
  }
};

// Fun√ß√£o para remover usu√°rio autorizado
export const removeAuthorizedUser = async (email) => {
  try {
    await usersAPI.delete(email);
    clearCache(); // Limpar cache ap√≥s remover usu√°rio
    return true;
  } catch (error) {
    console.error('Erro ao remover usu√°rio:', error);
    throw error;
  }
};

// Buscar avaliadores v√°lidos (apenas flag avaliador=true)
export const getAvaliadoresValidos = async () => {
  try {
    console.log('üîç DEBUG - Iniciando busca de avaliadores v√°lidos...');
    const users = await getAllAuthorizedUsers();
    console.log('üîç DEBUG - Total de usu√°rios encontrados:', users.length);
    console.log('üîç DEBUG - Usu√°rios encontrados:', users);
    
    // Filtrar usu√°rios que s√£o avaliadores v√°lidos
    const avaliadores = users.filter(user => {
      console.log(`üîç DEBUG - Analisando usu√°rio: ${user._userMail || user.email}`);
      console.log(`üîç DEBUG - Fun√ß√µes administrativas:`, user._funcoesAdministrativas);
      
      // CONTEXTO 3: Verificar APENAS se tem flag de avaliador
      const isAvaliador = user._funcoesAdministrativas && user._funcoesAdministrativas.avaliador === true;
      console.log(`üîç DEBUG - √â avaliador? ${isAvaliador}`);
      
      const isValid = isAvaliador;
      console.log(`üîç DEBUG - √â avaliador v√°lido? ${isValid}`);
      
      return isValid;
    });
    
    console.log('üîç DEBUG - Avaliadores filtrados:', avaliadores);
    
    // Retornar apenas os nomes dos avaliadores
    const nomesAvaliadores = avaliadores.map(user => {
      // Usar _userId que cont√©m o nome do usu√°rio, sen√£o usar email como fallback
      const nome = user._userId || user._userMail;
      console.log(`üîç DEBUG - Mapeando usu√°rio ${user._userMail} para nome: ${nome}`);
      return nome;
    });
    
    console.log('‚úÖ Avaliadores v√°lidos encontrados:', nomesAvaliadores);
    return nomesAvaliadores;
  } catch (error) {
    console.error('Erro ao buscar avaliadores v√°lidos:', error);
    console.log('‚ö†Ô∏è API n√£o dispon√≠vel, usando fallback local...');
    
    // Fallback: verificar localStorage para usu√°rios
    try {
      const localUsers = JSON.parse(localStorage.getItem('authorizedUsers') || '[]');
      console.log('üîç DEBUG - Usu√°rios do localStorage:', localUsers);
      
      // Filtrar usu√°rios que s√£o avaliadores v√°lidos no localStorage
      const avaliadores = localUsers.filter(user => {
        console.log(`üîç DEBUG - Analisando usu√°rio local: ${user._userMail}`);
        console.log(`üîç DEBUG - Fun√ß√µes administrativas local:`, user._funcoesAdministrativas);
        
        // CONTEXTO 3: Verificar APENAS se tem flag de avaliador
        const isAvaliador = user._funcoesAdministrativas && user._funcoesAdministrativas.avaliador === true;
        console.log(`üîç DEBUG - √â avaliador local? ${isAvaliador}`);
        
        const isValid = isAvaliador;
        console.log(`üîç DEBUG - √â avaliador v√°lido local? ${isValid}`);
        
        return isValid;
      });
      
      console.log('üîç DEBUG - Avaliadores filtrados do localStorage:', avaliadores);
      
      // Retornar apenas os nomes dos avaliadores
      const nomesAvaliadores = avaliadores.map(user => {
        // Usar _userId que cont√©m o nome do usu√°rio, sen√£o usar email como fallback
        const nome = user._userId || user._userMail;
        console.log(`üîç DEBUG - Mapeando usu√°rio local ${user._userMail} para nome: ${nome}`);
        return nome;
      });
      
      console.log('‚úÖ Avaliadores v√°lidos encontrados no localStorage:', nomesAvaliadores);
      return nomesAvaliadores;
      
    } catch (localError) {
      console.error('Erro ao acessar localStorage:', localError);
      console.log('‚ö†Ô∏è Usando fallback: lista vazia de avaliadores');
      return [];
    }
  }
};
